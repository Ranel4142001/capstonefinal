// public/js/customers_script.js

// =========================================================
// Dynamic Message Display Function
// =========================================================

/**
 * Displays a success or error message using a temporary Bootstrap alert.
 * This replaces the native JavaScript alert().
 * @param {string} message The text to display.
 * @param {string} type The Bootstrap alert type ('success', 'danger', 'warning', etc.).
 */
function displayMessage(message, type = 'success') {
    const container = document.querySelector('.dashboard-page-content');
    if (!container) return;

    // Remove any existing dynamic alerts first
    const existingAlert = document.querySelector('.dynamic-alert');
    if (existingAlert) {
        existingAlert.remove();
    }

    const alertHTML = `
        <div class="alert alert-${type} alert-dismissible fade show dynamic-alert" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    `;
    // Insert the new alert at the top of the main content area
    container.insertAdjacentHTML('afterbegin', alertHTML);

    // Auto-dismiss after 5 seconds
    const newAlert = document.querySelector('.dynamic-alert');
    if (newAlert) {
        setTimeout(() => {
            // Get the Bootstrap Alert instance or create a new one to close it
            const bootstrapAlert = bootstrap.Alert.getInstance(newAlert) || new bootstrap.Alert(newAlert);
            bootstrapAlert.close();
        }, 5000);
    }
}


document.addEventListener('DOMContentLoaded', function () {
    // 1. Logic to auto-hide alerts generated by PHP (The code moved from the view file)
    const phpAlert = document.querySelector('.alert');
    if (phpAlert && !phpAlert.classList.contains('dynamic-alert')) {
        setTimeout(() => {
            const bootstrapAlert = bootstrap.Alert.getInstance(phpAlert) || new bootstrap.Alert(phpAlert);
            bootstrapAlert.close();
        }, 5000); // 5 seconds
    }

    // =========================================================
    // CUSTOMER CRUD FUNCTIONALITY (UNCHANGED CORE LOGIC)
    // =========================================================
    loadCustomers();

    function loadCustomers() {
        fetch('../api/customers.php?action=list')
            .then(response => response.json())
            .then(data => {
                const tbody = document.querySelector('#customerTable tbody');
                tbody.innerHTML = ''; // Clear existing rows
                if (data.length > 0) {
                    data.forEach(customer => {
                        const row = `
                            <tr>
                                <td>${customer.customer_id}</td>
                                <td>${customer.first_name}</td>
                                <td>${customer.last_name}</td>
                                <td>${customer.contact_number || ''}</td>
                                <td>${customer.email || ''}</td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-warning edit-customer-btn"
                                        data-bs-toggle="modal" data-bs-target="#editCustomerModal"
                                        data-id="${customer.customer_id}"
                                        data-first-name="${customer.first_name}"
                                        data-last-name="${customer.last_name}"
                                        data-contact-number="${customer.contact_number || ''}"
                                        data-email="${customer.email || ''}"
                                        data-address="${customer.address || ''}">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                    <button type="button" class="btn btn-sm btn-danger delete-customer-btn"
                                        data-bs-toggle="modal" data-bs-target="#deleteCustomerModal"
                                        data-id="${customer.customer_id}"
                                        data-name="${customer.first_name} ${customer.last_name}">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </td>
                            </tr>
                        `;
                        tbody.insertAdjacentHTML('beforeend', row);
                    });
                } else {
                    tbody.innerHTML = '<tr><td colspan="6" class="text-center">No customers found.</td></tr>';
                }
            })
            .catch(error => {
                console.error("Error loading customers:", error);
                // Functional change: displayMessage instead of alert()
                displayMessage("Error loading customers.", 'danger');
            });
    }

    // Add Customer Form Submission
    const addCustomerForm = document.getElementById('addCustomerForm');
    if (addCustomerForm) {
        addCustomerForm.addEventListener('submit', function (e) {
            e.preventDefault();
            const formData = new FormData(this);
            formData.append('action', 'add');

            fetch('../api/customers.php', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        const addModal = bootstrap.Modal.getInstance(document.getElementById('addCustomerModal'));
                        if (addModal) addModal.hide();
                        addCustomerForm.reset();
                        loadCustomers();
                        // Functional change: displayMessage instead of alert()
                        displayMessage(data.message, 'success');
                    } else {
                        // Functional change: displayMessage instead of alert()
                        displayMessage(data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error("Error adding customer:", error);
                    // Functional change: displayMessage instead of alert()
                    displayMessage("Error adding customer.", 'danger');
                });
        });
    }

    // Edit Customer Button Click (delegated event listener for dynamically added buttons)
    document.querySelector('#customerTable tbody').addEventListener('click', function (e) {
        if (e.target.closest('.edit-customer-btn')) {
            const button = e.target.closest('.edit-customer-btn');
            document.getElementById('edit_customer_id').value = button.dataset.id;
            // Dataset attributes must be accessed in camelCase (data-first-name -> dataset.firstName)
            document.getElementById('edit_first_name').value = button.dataset.firstName;
            document.getElementById('edit_last_name').value = button.dataset.lastName;
            document.getElementById('edit_contact_number').value = button.dataset.contactNumber;
            document.getElementById('edit_email').value = button.dataset.email;
            document.getElementById('edit_address').value = button.dataset.address;
        } else if (e.target.closest('.delete-customer-btn')) {
            const button = e.target.closest('.delete-customer-btn');
            document.getElementById('delete_customer_id').value = button.dataset.id;
            document.getElementById('delete_customer_name').textContent = button.dataset.name;
        }
    });

    // Edit Customer Form Submission
    const editCustomerForm = document.getElementById('editCustomerForm');
    if (editCustomerForm) {
        editCustomerForm.addEventListener('submit', function (e) {
            e.preventDefault();
            const formData = new FormData(this);
            formData.append('action', 'edit');

            fetch('../api/customers.php', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        const editModal = bootstrap.Modal.getInstance(document.getElementById('editCustomerModal'));
                        if (editModal) editModal.hide();
                        loadCustomers();
                        // Functional change: displayMessage instead of alert()
                        displayMessage(data.message, 'success');
                    } else {
                        // Functional change: displayMessage instead of alert()
                        displayMessage(data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error("Error updating customer:", error);
                    // Functional change: displayMessage instead of alert()
                    displayMessage("Error updating customer.", 'danger');
                });
        });
    }

    // Delete Customer Form Submission
    const deleteCustomerForm = document.getElementById('deleteCustomerForm');
    if (deleteCustomerForm) {
        deleteCustomerForm.addEventListener('submit', function (e) {
            e.preventDefault();
            const formData = new FormData(this);
            formData.append('action', 'delete');

            fetch('../api/customers.php', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        const deleteModal = bootstrap.Modal.getInstance(document.getElementById('deleteCustomerModal'));
                        if (deleteModal) deleteModal.hide();
                        loadCustomers();
                        // Functional change: displayMessage instead of alert()
                        displayMessage(data.message, 'success');
                    } else {
                        // Functional change: displayMessage instead of alert()
                        displayMessage(data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error("Error deleting customer:", error);
                    // Functional change: displayMessage instead of alert()
                    displayMessage("Error deleting customer.", 'danger');
                });
        });
    }
});